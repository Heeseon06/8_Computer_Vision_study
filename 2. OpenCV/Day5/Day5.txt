모폴로지 처리
영상의 밝은 영역이나 어두운 영역을 축소 또는 확대 하는 기법
cv2.getStructuringElement(구조 요소의 모양, 사이즈)
= 구조 영상의 모양
    1. 직사각형(cv2.MORPH_RECT)
    - 가장 단순한 형태로, 모든 요소가 같은 값을 가지는 정사각형 또는 직사각형
    - 행창과 침식 연산에서 동일하게 작동
    - 객체 가장자리를 따라 명확한 변화를 줄 때 유용
    2. 타원형(cv2.MORPH_ELLIPSE)
    - 가장자리 부분을 더 부드럽게 처리
    - 객체의 둥근 모양을 유지하면서 노이즈를 제거할 때 유용
    3. 십자형(cv2.MORPH_CROSS)
    - 중심을 기준으로 수직 및 수평 방향으로 영향
    - 얇은 라인 구조를 강화하거나 제거하는 데 유용

침식(erosion) 연산
cv2.erode(영산, 구조요소, 출력영상, 고정점 위치)
- 이미지를 깎아 내는 연산
- 객체 크기는 감소하고 배경은 확대
- 작은 크기의 객체(잡음)제거 효과가 있음
- 어두운 부분의 노이즈를 제거하는 효과가 있음
- cv2.MORPH_ERODE

팽창(dilation) 연산
cv2.dilate(영상, 구조요소, 출력영상, 고정점 위치)
- 물체의 주변을 확장하는 연산
- 팽창 연산은 객체 외곽을 확대시키는 연산
- 객체 크기는 증가되고 배경은 감소
- 객체 내부의 홀이 있다면 홀을 채울 수 있음
- 밝은 부분의 노이즈를 제거하는 효과
- cv2.MORPH_DILATE

열림(opening)
- 팽창 연산과 침식 연산의 조함
- 침식 연산을 적용한 다음, 팽창 연산을 적용
- 침식 연산으로 인해 밝은 영역이 줄어들고, 어두운 영역이 늘어남
- 객체 크기 감소를 원래대로 복구 할 수 있음
- 작은 객체를 제거하고 구멍을 메우는데 사용
- cv2.MORPH_OPEN

닫힘(closing)
- 팽창 연산과 침식 연산의 조합
- 팽창 연산을 적용한 다음, 침식 연산을 적용
- 어두운 영역이 줄어들고 밝은 영역이 늘어남
- 작은 구멍을 메우고 끊어진 객체를 연결하는 데 사용
- cv2.MORPG_CLOSE

그레디언트(gradient)
- 영상에 팽창 연산을 적용한 결과에서 영상에 침식 영산을 적용한 결과를 뺌
- 경계가 강조된 영상을 생성
- 엣지 검출, 객체의 윤곽 추출. 영상 분할 등에 사용
- cv2.MORPH_GRADIENT


레이블링
- 이진화, 모폴로지를 수행하면 객체와 배경 영역을 구분할 수 있게됨
- 객체 단위 분석을 통해 각 객체를 분할하여 특징을 분석하고 객체의 위치, 크기 정보, 모양 분석, ROI 추출 등이 가능함
- 서로 연결되어 있는 객체 픽셀에 고유번호를 할당하여 영역 기반 모양분석, 레이블맵, 바운딩 박스, 픽셀 개수, 무게 중심, 좌표 등을 반환할 수 있게 함
    cv2.connectedComponents(영상, 레이블맵)
    레이블맵: 픽셀 연결 관계(4방향 연결, 8방향 연결)
    return(반환값): 객테 객수, 레이블 맵 행렬

    cv2.connectedComponentsWithStats(영상, 레이블맵)
    return(반환값): 객체 개수, (객체 위치, 가로세로 길이, 면적 등 행렬), 무게중심 정보


객체의 외곽선 검출
cv2.findContours(영상, 검출모드, 외각선 죄표 근사화 방법)
검출 모드
    cv2.RETR_EXRETNAL: 외부 외곽선만 검출
    cv2.RETR_LIST: 모든 외곽선을 검출하며, 계층 관계는 무시
    cv2.RETR_CCOMP: 모든 외곽선 검출하며, 2단계 계층 구조를 구성
        첫번째 계층: 바깥쪽 윤곽선
        두번째 계층: 내부 윤곽선
    cv2.RETR_TREE: 모든 외곽선 검출, 전체 계층 구조를 구성

외각선 좌표 근사화 방법
외곽선 점들의 저장 방식과 정확도를 정의

CHAIN_APPROX_NONE: 모든 외각선의 점을 저장
CHAIN_APPROX_SHIMPLE: 수평, 수직, 대각선 방향 점들은 그 점의 끝점만 저장하여 압축

외곽선 그리기
cv2.drawContours(영상, 외곽선 좌표 정보, 외곽선 인덱스, 색상, 두께)
외곽선 인겟스: -1을 지정하면 모든 외곽선을 그림

외곽선 길이 구하기
cv2.arcLength(외곽선 좌표, 페곡선 여부)

면적 구하기
cv2.contourArea(외곽선 좌표, False)

바운딩 박스 구하기
cv2.boundingRect(외곽선 좌표)


외곽선 근사화
검출한 외곽선 정보를 분석하여 정점수가 적은 외곽선 또는 다각형으로 표현할 수 있게 만드는 것
cv2.approxPolyDP(외곽선 좌표, 근사화 정밀도 조절, 폐곡선 여부)
근사화 정밀도 조절: 입력 외곽선과 근사화된 외곽선 사이의 최대길이. 값이 작을수록 다각형이 정확해지고, 꼭지점 수가 늘어남

볼록 부분이 있는지 여부
cv2.isContourConvex()
볼록 부분이 있으면 true, 없으면 False

볼록 외피를 계산
cv2.convexHull()
주어진 점 집합을 둘러싸는 가장 작은 볼록 다각형을 반환


OCR(Optical Character Recognition)
- 광학 문자 인식
- 이미지나 문서에서 텍스트를 자동으로 인식하고 컴퓨터가 이행할 수 있는 텍스트 데이터로 변환하는 프로세스
- Tesseract, EasyOCR, PaddileOCR, CLOVA OCR(네이버 API), Cloud Vision(구글 API)

테서렉트(Tesseract)
- 오픈 소스 OCR 라이브러리로 구글에서 개발하고 현재는 여러 커뮤니티에 의해 유지보수
설치과정
- https://github.com/UB-Mannheim/tesseract/wiki
- tesseract-ocr-w64-setup-5.4.0.20240606.exe (64 bit) 다운로드 -> Choose Componets에서 Additonal Script Data(download) 트리를 내림 -> Hangul script와  Hangul vertical script를 체크, Additional Language Data(download) 트리를 내림 -> Korean 체크

윈도우 환경 설정
탐색기 -> "내 PC" 마우스 오른쪽 버튼 "속성" 클릭 -> 창을 최대한 후에 우측 메뉴 "고급 시스템 설정" 클릭 -> "환경 변수" 버튼 클릭 -> "시스템 변수"에서 path를 선택하고 "편집" 버튼 클릭 -> "새로 만들기" 버튼 클릭 -> 테서렉트 설치 경로를 추가(예: "C:\Program Files\Tesseract-OCR")

팀과제
Tesseract, EasyOCR, PaddileOCR, CLOVA OCR(네이버 API), Cloud Vision(구글 API)
위 라이브러리 또는 API를 사용하여  OCR 프로젝트 개발
(포스터, 간판, 주민등록증, 운전면허증, 차량번호인식 ....)
OCR 비교분석
29일 발표
